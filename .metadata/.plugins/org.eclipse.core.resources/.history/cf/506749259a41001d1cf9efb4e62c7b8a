/*
 * Libros.c
 *
 *  Created on: 30 sep. 2022
 *      Author: Facu
 */

#include "Libros.h"
#include "utn.h"

int idAutomatico = 1;
int Libro_ObtenerIdUnico(void) {
	return idAutomatico++;
}

/**
 * @brief Funcion que imprime un solo libro
 * @param arrayLibro: arrayLibro de listado de libros
 */
void Libro_imprimirUno(Libro arrayLibro) {
	printf("ID: %d\n",arrayLibro.id);
	printf("Titulo: %s\n",arrayLibro.titulo);
	printf("Precio: $%.2f\n",arrayLibro.precio);
	printf("Fecha de publicacion: %d/%d/%d\n",arrayLibro.fechaPublicacion.dia, arrayLibro.fechaPublicacion.mes, arrayLibro.fechaPublicacion.anio);
}

/**
 * @brief Funcion que imprime todos los libros
 * @param arrayLibro: arrayLibro de libros
 * @param size: longitud del arrayLibro
 * @return Retorna 0 caso Exito! (-1) Error!
 */
int Libro_imprimirTodos(Libro arrayLibro[], int size) {
	int rtn = -1;
	int i;

	if (arrayLibro != NULL && size > 0) {
			//ESTA TODO BIEN
			for (i = 0; i < size; i++) {
				if (arrayLibro[i].status == OCUPADO) { //Si 'estado' == OCUPADO
					Libro_imprimirUno(arrayLibro[i]);
					rtn = 0; //Ok
				}
			}
	}

	return rtn;
}

int Libro_initArrayLibro(Libro *arrayLibro,int size){
	int i;
	int retorno = -1;
	if(size > 0)
	{

		for(i=0;i<size;i++)
		{
			arrayLibro[i].status = LIBRE;

		}
		retorno = 0;
	}
	return retorno;
}

int Libro_buscarLugarLibre(Libro *arrayLibro,int size){
	int index = -1;
	int i;
	if(size > 0)
	{
		index = 0;
		for(i=0;i<size;i++)
		{
			if(arrayLibro[i].status == LIBRE)
			{
				index = i;
				break;
			}
		}

	}
	return index;
}

int Libro_addLibro(Libro *arrayLibro,int size,int indice){
	int retorno = -1;
	int i;
	Libro bufferLibro;

	if(size > 0 && indice < size && indice >= 0){
		if(utn_getDescripcion(bufferLibro.titulo, MAX_CHARS, "\nIngrese nombre del Libro: ", "\nError! Ingrese un nombre", 2) == 0){

			strncpy(bufferLibro.titulo, strlwr(bufferLibro.titulo), MAX_CHARS);
			bufferLibro.titulo[0] = toupper(bufferLibro.titulo[0]);
			for(i=0; i<size; i++){
				if(bufferLibro.titulo[i] == ' '){
					bufferLibro.titulo[i + 1] = toupper(bufferLibro.titulo[i + 1]);
				}
			}

			//IMPRIMIR ARRAY AUTORES, EDITORIALES Y PAISES

			//imprimir array autores
			//pedir al usuario a que autor perteneces
			//imprimir array editoriales
			//pedir al usuario la editorial del libro
			//asignar id autor y editorial a la estructura libro
			if( utn_getNumeroFlotante(&bufferLibro.precio, "\nIngrese precio: ", "\nError! Ingrese un numero", 10, 10000000, 2)== 0 &&
				utn_getNumero(&bufferLibro.fechaPublicacion.dia, "\nIngrese fecha de publicacion(Numerica)\nDia: ", "\nError! Ingrese un numero: ", 1, 31, 2) == 0 &&
				utn_getNumero(&bufferLibro.fechaPublicacion.mes, "\nMes: ", "\nError! Ingrese un numero: ", 1, 12, 2) == 0 &&
				utn_getNumero(&bufferLibro.fechaPublicacion.anio, "Anio: ", "\nError! Ingrese un numero: ", 1800, 2022, 2) == 0){
				bufferLibro.id = Libro_ObtenerIdUnico();
				bufferLibro.status = 1;
				arrayLibro[indice] = bufferLibro;
				Libro_imprimirUno(arrayLibro[indice]);
				retorno = 0;
			}
		}
	}
	return retorno;
}


int Libro_modificar(Libro *arrayLibro,int size){

	int retorno = -1;
	int idAux;
	int index;
	Libro auxLibro;

		index = Libro_buscarLibroPorId(arrayLibro, size);
		if(index > -1 && size > 0){
			auxLibro = arrayLibro[index];

			auxLibro = Libro_modificarUnLibro(auxLibro);

			arrayLibro[index] = auxLibro;
			retorno = 0;
		}

	return retorno;
}

Libro Libro_modificarUnLibro(Libro libro){
	int opcion;
		if(utn_getNumero(&opcion, "\nIngrese la opcion de lo que desea modificar\n"
								"1. Titulo\n"
								"2. Precio\n"
								"3.Fecha de publicacion\n"
								"7. Todos los datos\n"
								"\n0.CANCELAR Modificacion\n", "Opcion no habilitada", 0, 7, 2) == 0){



		switch (opcion) {
		case 0:
			printf("Modificacion Cancelada\n");
			break;
		case 1:
			utn_getDescripcion(libro.titulo, MAX_CHARS, "\nIngrese titulo del libro", "error\n", 2);
			break;
		case 2:
			utn_getNumeroFlotante(&libro.precio, "Ingrese precio: ", "\nError! Ingrese un precio: ", 10, 1000000, 2);
			break;
		case 3:
			utn_getNumero(&libro.fechaPublicacion.dia, "\nIngrese dia", "\nError\n", 1, 31, 2);
			utn_getNumero(&libro.fechaPublicacion.mes, "\nIngrese mes", "\nError\n", 1, 31, 2);
			utn_getNumero(&libro.fechaPublicacion.anio, "\nIngrese anio", "\nError\n", 1, 31, 2);
			break;
		/*case 4:
			utn_getNumero(&libro.statusFlight, "\nRe-ingrese el estado del vuelo\n0. Cancelado.\n1. Hora de despegue asignada.\n2. En vuelo.\n3. Aterrizado.\n", "Error\n", 0, 3, 2);
			break;
		case 5:
			utn_getCadena(libro.flycode, 10, "\nRe-ingrese el codigo de vuelo", "error\n", 2);
			break;
		case 6:
			utn_getNumeroFlotante(&libro.price, "Ingrese precio: ", "\nError! Ingrese un precio: ", 100, 1000000, 2);
			break;*/
		case 7:
			utn_getDescripcion(libro.titulo, MAX_CHARS, "\nIngrese el titulo", "error\n", 2);
			utn_getNumeroFlotante(&libro.precio, "Ingrese precio: ", "\nError! Ingrese un precio: ", 10, 1000000, 2);
			utn_getNumero(&libro.fechaPublicacion.dia, "\nIngrese dia", "\nError\n", 1, 31, 2);
			utn_getNumero(&libro.fechaPublicacion.mes, "\nIngrese mes", "\nError\n", 1, 31, 2);
			utn_getNumero(&libro.fechaPublicacion.anio, "\nIngrese anio", "\nError\n", 1, 31, 2);

			break;
		default:
			printf("Opcion ingresada invalida!\n\n");
			break;
		}
		}else{
			printf("\nError en la modificacion.\n");
		}
		return libro;
}

int Libro_buscarLibroPorId(Libro *arrayLibro, int size){
	int rtn = -1;
	int flag = 0;
	int i;
	int buscarID;

	if (size > 0) {

		Libro_imprimirTodos(arrayLibro, size);

		//PEDIR UN ID
		if(utn_getNumero(&buscarID, "\nIngrese ID: ", "Error! ID incorrecto.\nVuelva  a intentarlo\n", 0, 100, 2) == 0){
			for (i = 0; i < size; i++) {
				if (arrayLibro[i].status == OCUPADO && arrayLibro[i].id == buscarID) {
					flag = 1;
					rtn = i; //retorno index del ID que estoy buscando
					break;

				}
			}
		}
		if (flag == 0) { //Si no encontre ID...
			rtn = -2;
		}

	}
	return rtn;
}


/***Menu***/
/**
 * Imprime el menu principal
 */
void imprimirMenu(){
	printf("\n\tMenu Principal - Facundo Estigarribia\n\n"
			"1.Alta\n"
			"2.Modificacion\n"
			"3.Baja\n"
			"4.Informar\n"
			"5.Listar\n"
			"6.Salir\n\n");
}
